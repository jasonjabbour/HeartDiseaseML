library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = white, vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
TClass <- factor(c(0, 0, 1, 1))
PClass <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = TClass, y = PClass)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
#get accuracy of our model for our test data
testData = testData %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testData)
sum(testData$accurate)
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(30, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "grey", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "orange", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "orange", high = "blue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "black", high = "blue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightpink", high = "blue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightgreen", high = "blue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "ligthblue", high = "navyblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightblue", high = "navyblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "darkblue") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "blue", high = "navy") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 30)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "darkturquoise", high = "deepskyblue4") +
theme_bw() + theme(legend.position = "none")
#calculate false positives (HD when no HD)
testData = testData %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testData$false_positve)/nrow(testData)
sum(testData$false_positve)
testData = testData %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testData)
sum(testData$accurate)
testData = testData %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testData$false_positve)/nrow(testData)
sum(testData$false_positve)
testData = testData %>% mutate(false_negatvie = as.numeric(((model_pred == 0) & (heart_disease_present == 1))))
sum(testData$false_negatvie)/nrow(testData)
sum(testData$false_negatvie)
testData = testData %>% mutate(true_negative = as.numeric(((model_pred == 0) & (heart_disease_present == 0))))
sum(testData$true_negative)/nrow(testData)
sum(testData$true_negative)
#calculate true postive (HD when HD)
testData = testData %>% mutate(true_positive = as.numeric(((model_pred == 1) & (heart_disease_present == 1))))
sum(testData$true_positive)/nrow(testData)
sum(testData$true_positive)
#calculate true postive (HD when HD)
testData = testData %>% mutate(true_positive = as.numeric(((model_pred == 1) & (heart_disease_present == 1))))
sum(testData$true_positive)/nrow(testData)
sum(testData$true_positive)
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(2,15,15,4)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "darkturquoise", high = "deepskyblue4") +
theme_bw() + theme(legend.position = "none")
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(15,2,4,15)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "darkturquoise", high = "deepskyblue4") +
theme_bw() + theme(legend.position = "none")
#split data -------------------------------
set.seed(my_seed)
#randomly split data into training and testing data 80% train
trainingIndex = sample(1:nrow(heart_data2),.8*nrow(heart_data2))
#save training data
trainingData = heart_data2[trainingIndex, ]
#save testing data
testData = heart_data2[-trainingIndex, ]
trainingData
#logistic regression (use binomial for logistic reg)
#model heart disease using all variables: ~.
logistic_model = glm(heart_disease_present ~ .,family="binomial",data=trainingData)
summary(logistic_model)
#Test Model -----------------------------------------------
#dont have to do this
heart_disease_present = testData$heart_disease_present
testData = testData[,-14]
#For
#testData = testData[,-17]
#for log
#testData = testData[,-18]
#using the model we made, add the probability of HD for each row
testData$model_prob = predict(logistic_model, testData, type = "response")
#add col back to dataset
testData = cbind(testData,heart_disease_present)
testData
#make binary based on probability
testData = testData %>% mutate(model_pred = 1*(model_prob >.55)+0)
testData
#get accuracy of our model for our test data
testData = testData %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testData)
sum(testData$accurate)
#calculate false positives (HD when no HD)
testData = testData %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testData$false_positve)/nrow(testData)
sum(testData$false_positve)
#5.5% False Positve
#calculate false negative (no HD when HD)
testData = testData %>% mutate(false_negatvie = as.numeric(((model_pred == 0) & (heart_disease_present == 1))))
sum(testData$false_negatvie)/nrow(testData)
sum(testData$false_negatvie)
#11% False Negative
#calculate true negative (no HD when no HD)
testData = testData %>% mutate(true_negative = as.numeric(((model_pred == 0) & (heart_disease_present == 0))))
sum(testData$true_negative)/nrow(testData)
sum(testData$true_negative)
#calculate true postive (HD when HD)
testData = testData %>% mutate(true_positive = as.numeric(((model_pred == 1) & (heart_disease_present == 1))))
sum(testData$true_positive)/nrow(testData)
sum(testData$true_positive)
#split data -------------------------------
set.seed(my_seed)
#randomly split data into training and testing data 80% train
trainingIndex = sample(1:nrow(heart_data2),.8*nrow(heart_data2))
#save training data
trainingData = heart_data2[trainingIndex, ]
#save testing data
testData = heart_data2[-trainingIndex, ]
trainingData
#logistic regression (use binomial for logistic reg)
#model heart disease using all variables: ~.
logistic_model = glm(heart_disease_present ~ .,family="binomial",data=trainingData)
summary(logistic_model)
#Test Model -----------------------------------------------
#dont have to do this
heart_disease_present = testData$heart_disease_present
testData = testData[,-14]
#For
#testData = testData[,-17]
#for log
#testData = testData[,-18]
#using the model we made, add the probability of HD for each row
testData$model_prob = predict(logistic_model, testData, type = "response")
#add col back to dataset
testData = cbind(testData,heart_disease_present)
testData
#make binary based on probability
testData = testData %>% mutate(model_pred = 1*(model_prob >.6)+0)
testData
#get accuracy of our model for our test data
testData = testData %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testData)
sum(testData$accurate)
#calculate false positives (HD when no HD)
testData = testData %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testData$false_positve)/nrow(testData)
sum(testData$false_positve)
#5.5% False Positve
#calculate false negative (no HD when HD)
testData = testData %>% mutate(false_negatvie = as.numeric(((model_pred == 0) & (heart_disease_present == 1))))
sum(testData$false_negatvie)/nrow(testData)
sum(testData$false_negatvie)
#11% False Negative
#calculate true negative (no HD when no HD)
testData = testData %>% mutate(true_negative = as.numeric(((model_pred == 0) & (heart_disease_present == 0))))
sum(testData$true_negative)/nrow(testData)
sum(testData$true_negative)
#calculate true postive (HD when HD)
testData = testData %>% mutate(true_positive = as.numeric(((model_pred == 1) & (heart_disease_present == 1))))
sum(testData$true_positive)/nrow(testData)
sum(testData$true_positive)
#get accuracy of our model for our test data
testData = testData %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testData)
sum(testData$accurate)
testData = testData %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testData$false_positve)/nrow(testData)
sum(testData$false_positve)
testData = testData %>% mutate(false_negatvie = as.numeric(((model_pred == 0) & (heart_disease_present == 1))))
sum(testData$false_negatvie)/nrow(testData)
sum(testData$false_negatvie)
testData = testData %>% mutate(true_negative = as.numeric(((model_pred == 0) & (heart_disease_present == 0))))
sum(testData$true_negative)/nrow(testData)
sum(testData$true_negative)
testData = testData %>% mutate(true_positive = as.numeric(((model_pred == 1) & (heart_disease_present == 1))))
sum(testData$true_positive)/nrow(testData)
sum(testData$true_positive)
Actual <- factor(c(0, 0, 1, 1))
Predicted <- factor(c(0, 1, 0, 1))
Y      <- c(16,1,4,15)
df <- data.frame(TClass, PClass, Y)
library(ggplot2)
ggplot(data =  df, mapping = aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), color = "white", vjust = 1) +
scale_fill_gradient(low = "darkturquoise", high = "deepskyblue4") +
theme_bw() + theme(legend.position = "none")
heart_dataRF = heart_data2
heart_dataRF
# Example for feature engineering: data$num[data$num >1] = 1
#Split data
set.seed(my_seed)
#randomly split data into training and testing data 80% train
splitDataTraining = sample(1:nrow(heart_dataRF),.8*nrow(heart_dataRF))
#save training data
trainingDataRF = heart_dataRF[splitDataTraining, ]
#save testing data
testDataRF = heart_dataRF[-splitDataTraining, ]
#initialize random forest instance
RFmodel = randomForest(heart_disease_present ~.,data=trainingDataRF)
#look at confusion matrix
RFmodel
testDataRF
#use model to predict test model, dont pass in answer (CHANGE NUM)
predictedDataRF = predict(RFmodel, newdata = testDataRF[,-14])
#CHANGE NUM
confusionMatrix = table(testDataRF[,14],predictedDataRF)
confusionMatrix
nrow(testDataRF)
heart_dataRF = heart_data2
heart_dataRF
# Example for feature engineering: data$num[data$num >1] = 1
#Split data
set.seed(my_seed)
#randomly split data into training and testing data 80% train
splitDataTraining = sample(1:nrow(heart_dataRF),.8*nrow(heart_dataRF))
#save training data
trainingDataRF = heart_dataRF[splitDataTraining, ]
#save testing data
testDataRF = heart_dataRF[-splitDataTraining, ]
#initialize random forest instance
RFmodel = randomForest(heart_disease_present ~.,data=trainingDataRF)
#look at confusion matrix
RFmodel
testDataRF
#use model to predict test model, dont pass in answer (CHANGE NUM)
predictedDataRF = predict(RFmodel, newdata = testDataRF[,-14])
#CHANGE NUM
confusionMatrix = table(testDataRF[,14],predictedDataRF)
confusionMatrix
nrow(testDataRF)
#for engineered df ---------------------------------------
predCol = as.vector(predictedDataRF)
predCol
predCol = as.numeric(predCol)
predCOl
predCol
testDataRF = cbind(testDataRF,predictedDataRF)
#make binary based on probability
testDataRF = testDataRF %>% mutate(model_pred = 1*(predCol >.5)+0)
testDataRF
#get accuracy of our model for our test data
testDataRF = testDataRF %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testDataRF)
heart_data = read.csv("heart_data.csv",header=T)
head(heart_data)
my_seed = 152021
#copy
heart_data2 = heart_data[,-1] #everything except id
#change categorical data to factors
heart_data2$slope_of_peak_exercise_st_segment = as.factor(heart_data2$slope_of_peak_exercise_st_segment)
heart_data2$thal = as.factor(heart_data2$thal)
heart_data2$chest_pain_type = as.factor(heart_data2$chest_pain_type)
heart_data2$num_major_vessels = as.factor(heart_data2$num_major_vessels)
heart_data2$fasting_blood_sugar_gt_120_mg_per_dl = as.factor(heart_data2$fasting_blood_sugar_gt_120_mg_per_dl)
heart_data2$resting_ekg_results = as.factor(heart_data2$resting_ekg_results)
heart_data2$sex = as.factor(heart_data2$sex)
heart_data2$exercise_induced_angina = as.factor(heart_data2$exercise_induced_angina)
heart_data2$heart_disease_present = as.factor(heart_data2$heart_disease_present)
#sanity check
table(heart_data2$slope_of_peak_exercise_st_segment)
heart_data2 %>% ggplot(aes(x=heart_disease_present,y=slope_of_peak_exercise_st_segment, fill=slope_of_peak_exercise_st_segment)) +
geom_bar(stat="identity")
#check for na values
sapply(heart_data2, function(x) sum(is.na(x)))
# we have no na values
heart_dataRF = heart_data2
heart_dataRF
# Example for feature engineering: data$num[data$num >1] = 1
#Split data
set.seed(my_seed)
#randomly split data into training and testing data 80% train
splitDataTraining = sample(1:nrow(heart_dataRF),.8*nrow(heart_dataRF))
#save training data
trainingDataRF = heart_dataRF[splitDataTraining, ]
#save testing data
testDataRF = heart_dataRF[-splitDataTraining, ]
#initialize random forest instance
RFmodel = randomForest(heart_disease_present ~.,data=trainingDataRF)
#look at confusion matrix
RFmodel
testDataRF
#use model to predict test model, dont pass in answer (CHANGE NUM)
predictedDataRF = predict(RFmodel, newdata = testDataRF[,-14])
#CHANGE NUM
confusionMatrix = table(testDataRF[,14],predictedDataRF)
confusionMatrix
nrow(testDataRF)
#for engineered df ---------------------------------------
predCol = as.vector(predictedDataRF)
predCol = as.numeric(predCol)
predCol
testDataRF = cbind(testDataRF,predictedDataRF)
#make binary based on probability
testDataRF = testDataRF %>% mutate(model_pred = 1*(predCol >.5)+0)
testDataRF
#get accuracy of our model for our test data
testDataRF = testDataRF %>% mutate(accurate = 1*(model_pred == heart_disease_present))
sum(testData$accurate)/nrow(testDataRF)
#calculate false positives (HD when no HD)
testDataRF = testDataRF %>% mutate(false_positve = as.numeric(((model_pred == 1) & (heart_disease_present == 0))))
sum(testDataRF$false_positve)/nrow(testData)
#5.5% False Positve
#calculate false negative (no HD when HD)
testDataRF = testDataRF %>% mutate(false_negatvie = as.numeric(((model_pred == 0) & (heart_disease_present == 1))))
sum(testDataRF$false_negatvie)/nrow(testData)
#11% False Negative
